services:
  postgres:
    container_name: postgres_container
    image: postgres:17.4-bullseye
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mfg
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U user -d mfg && pg_isready -U user -d authorization",
        ]
      interval: 10s
      timeout: 5s
      retries: 4
      start_period: 40s
    volumes:
      - "./database/postgres/init.sh:/docker-entrypoint-initdb.d/init.sh"
      - "db:/var/lib/postgresql/data"
  postgres_migration:
    container_name: postgres_migration_container
    image: ghcr.io/jackc/tern:v2.3.2
    restart: no
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - "./database/postgres/migrations/:/db-migration"
    entrypoint:
      [
        "/tern",
        "migrate",
        "--migrations",
        "/db-migration",
        "--conn-string",
        "postgres://user:password@postgres:5432/mfg?sslmode=disable",
      ]
  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mfg.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5050:80"
  redis:
    container_name: redis_container
    image: redis:8.0-M04
    restart: always
    ports:
      - "$6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass password
    volumes:
      - "./database/redis/data/:/db-cache"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
  spicedb:
    container_name: spicedb_container
    image: authzed/spicedb:v1.44.0
    restart: on-failure
    ports:
      - "9090" # prometheus metrics
      - "50051:50051" # grpc endpoint
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 10s
      timeout: 5s
      retries: 4
      start_period: "5s"
    # environment:
    #   - "SPICEDB_LOG_FORMAT=console"
    #   - "SPICEDB_GRPC_PRESHARED_KEY=${SPICEDB_TOKEN}"
    #   - "SPICEDB_DATASTORE_ENGINE=memory"
    #   - "SPICEDB_DISPATCH_CACHE_METRICS=true"
    #   - "SPICEDB_DISPATCH_CLUSTER_METRICS=true"
    #   - "SPICEDB_NS_CACHE_METRICS=true"
    #   - "SPICEDB_METRICS_ENABLED=true"
    #   - "SPICEDB_OTEL_PROVIDER=otlpgrpc"
    #   - "SPICEDB_OTEL_SAMPLE_RATIO=1"
    #   - "OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317"
    command: >
      serve \
        --grpc-preshared-key=${SPICEDB_TOKEN} \
        --datastore-engine=postgres \
        --datastore-conn-uri=postgres://user:password@postgres:5432/authorization?sslmode=disable
    depends_on:
      spicedb_migration:
        condition: service_started
      postgres:
        condition: service_healthy
      # otel_collector:
      #   condition: service_started
  spicedb_migration:
    image: authzed/spicedb:v1.44.0
    container_name: spicedb_migration_container
    restart: on-failure
    entrypoint: "spicedb migrate head \
      --datastore-engine=postgres \
      --datastore-conn-uri=postgres://user:password@postgres:5432/authorization?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
  spicedb_repair:
    image: authzed/spicedb:v1.44.0
    container_name: spicedb_repair_container
    entrypoint: "spicedb datastore repair transaction-ids \
      --datastore-engine=postgres \
      --datastore-conn-uri=postgres://user:password@postgres:5432/authorization?sslmode=disable"
    restart: on-failure
    depends_on:
      spicedb_migration:
        condition: service_completed_successfully
volumes:
  db:
  db-migration:
  db-cache:
  # grafana-storage:

  # otel_collector:
  #   container_name: otel_collector_container
  #   image: otel/opentelemetry-collector-contrib:latest
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   volumes:
  #     - ./infra/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - "4317:4317" # OTLP gRPC
  #     - "9090" # Prometheus metrics for collector
  # prometheus:
  #   image: "prom/prometheus:latest"
  #   container_name: "prometheus_container"
  #   command:
  #     - "--config.file=/etc/prometheus.yaml"
  #   ports:
  #     - "9090:9090"
  #   restart: "unless-stopped"
  #   volumes:
  #     - ./infra/prometheus-grafana/prometheus.yaml:/etc/prometheus.yaml
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana_container
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #     - tempo
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_AUTH_DISABLE_LOGIN_FORM=true
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  # tempo:
  #   container_name: tempo_container
  #   image: "grafana/tempo:1.5.0"
  #   command: "-search.enabled=true -config.file=/etc/tempo.yaml"
  #   volumes:
  #     - "./infra/tempo/tempo.yaml:/etc/tempo.yaml"
  #   restart: "unless-stopped"
  #   ports:
  #     - "4317" # OTLP gRPC
  #     - "3100" # tempo
